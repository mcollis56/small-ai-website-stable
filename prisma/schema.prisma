generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/small_ai_website/nextjs_space/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model ContactSubmission {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contact_submissions")
}

// NextAuth.js Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tutorial Platform Models
model Tutorial {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  price       Int      // Price in cents
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  modules     TutorialModule[]
  purchases   Purchase[]
}

model TutorialModule {
  id          String   @id @default(cuid())
  tutorialId  String
  title       String
  description String?  @db.Text
  content     String?  @db.Text
  order       Int
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tutorial    Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  
  @@unique([tutorialId, slug])
}

model Purchase {
  id              String   @id @default(cuid())
  userId          String
  tutorialId      String
  stripeSessionId String?  @unique
  amount          Int      // Amount paid in cents
  status          String   @default("completed") // completed, pending, failed
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutorial        Tutorial @relation(fields: [tutorialId], references: [id])
  
  @@unique([userId, tutorialId])
}
